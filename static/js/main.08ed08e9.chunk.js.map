{"version":3,"sources":["config.js","modules/tv-list/TvList.jsx","modules/home/Home.jsx","modules/tv-list/tv-detail/TvDetail.jsx","routes.js","index.js"],"names":["TMDB_API_KEY","concat","process","TvList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","movieId","history","push","pathname","search","_this2","tvshows","react_default","a","createElement","className","results","map","movie","isFavourite","localStorage","hasOwnProperty","JSON","parse","getItem","find","id","toString","key","onClick","handleItemClick","poster_path","src","alt","name","Component","withRouter","Home","isLoading","totalMovies","pageNumber","sortBy","genres","selectedGenre","searchQuery","handleSearch","bind","assertThisInitialized","changePage","handleSortChange","handleGenreChange","getTvShows","getGenres","axios","get","setState","data","searchTv","total_pages","event","target","value","resetGenres","resetSort","_this3","selected","window","scrollTo","_this4","resetSearch","_this5","_this$state3","placeholder","type","onChange","genre","modules_tv_list_TvList","length","dist_default","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","pageClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","previousLinkClassName","nextLinkClassName","TvDetail","tvDetail","tvId","season","seasonDetail","favourites","favourited","handleSeasonChange","toggleFavourite","checkIfFavourited","getTvId","setUpLocalStorage","favouritesLocal","setItem","stringify","_this$state","hasTvId","location","query","qs","ignoreQueryPrefix","getTvDetail","getSeason","showDetail","document","title","showSeason","_this6","filter","toConsumableArray","_this$state4","style","backgroundImage","backdrop_path","number_of_seasons","number_of_episodes","status","created_by","creator","episode_run_time","origin_country","moment","first_air_date","format","vote_average","videos","react","video","frameBorder","allow","allowFullScreen","credits","cast","person","character","overview","seasons","season_number","episodes","episode","still_path","episode_number","Routes","Switch","Route","exact","component","path","MovieDetail","ReactDOM","render","HashRouter","routes","getElementById"],"mappings":"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","file":"static/js/main.08ed08e9.chunk.js","sourcesContent":["// Configuration Constants\n\nexport const TMDB_API_KEY = `${process.env.REACT_APP_TMDB_API_KEY}`;","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport \"./TvList.scss\";\n\nclass TvList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * handles redirection when a tv show is clicked\n     * @param {string} movieId\t\tmovie id\n     */\n    handleItemClick(movieId) {\n    \tconst { history } = this.props;\n\n    \thistory.push({\n\t\t  pathname: '/tv-detail',\n\t\t  search: `?query=${movieId}`\n\t\t})\n\n    }\n\n    render() {\n\n    \tconst { tvshows } = this.props;\n\n        if(tvshows) {\n            return (\n                <div className=\"movie-list\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            {tvshows.results.map(movie => {\n\n                                let isFavourite = false;\n\n                                if (localStorage.hasOwnProperty(\"favourites\")) {\n                                    const favouritesLocal = JSON.parse(localStorage.getItem('favourites'));\n\n                                    isFavourite = favouritesLocal.find(id => {\n                                        return id === movie.id.toString()\n                                    });\n                                }\n\n                                return (\n                                    <div className=\"col-6 col-sm-4 col-md-3 col-lg-3\" key={movie.id}>\n                                        <div className=\"movie-list__item\" onClick={() => this.handleItemClick(movie.id)}>\n                                            <div className=\"movie-list__image\">{movie.poster_path ? <img src={`http://image.tmdb.org/t/p/w500${movie.poster_path}`} alt={movie.name} /> : <img src={`https://via.placeholder.com/500x735.png?text=${movie.name}`} alt={movie.name} />}</div>\n                                                {isFavourite && <span className=\"movie-list__favourited\"></span>}\n                                        </div>\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </div>\n            )\n        } else {\n            return null;\n        }\n\n        \n    }\n}\n\nexport default withRouter(TvList);","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport ReactPaginate from 'react-paginate';\n\nimport { TMDB_API_KEY } from \"../../config.js\";\n\nimport TvList from \"../tv-list/TvList.jsx\";\n\nimport \"../../styles.scss\";\nimport \"./Home.scss\";\n\nclass Home extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisLoading: true,\n\t\t\ttvshows: null,\n\n\t\t\ttotalMovies: null,\n\t\t\tpageNumber: 1,\n\n\t\t\tsortBy: \"popularity.desc\",\n\t\t\tgenres: null,\n\t\t\tselectedGenre: \"\",\n\n\t\t\tsearchQuery: \"\"\n\t\t};\n\n\t\tthis.handleSearch = this.handleSearch.bind(this);\n\t\tthis.changePage = this.changePage.bind(this);\n\t\tthis.handleSortChange = this.handleSortChange.bind(this);\n\t\tthis.handleGenreChange = this.handleGenreChange.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getTvShows();\n\t\tthis.getGenres();\n\t}\n\n\t/**\n     * gets the tv list from the API endpoint\n     */\n    async getTvShows() {\n    \tconst { pageNumber, sortBy, selectedGenre } = this.state;\n\n    \tconst tvshows = await axios.get(`https://api.themoviedb.org/3/discover/tv?api_key=${TMDB_API_KEY}&language=en-US&with_genres=${selectedGenre}&sort_by=${sortBy}&page=${pageNumber}`)\n\n        this.setState({\n            isLoading: false,\n            tvshows: tvshows.data,\n            totalMovies: 500\n        });\n\t}\n\n\t/**\n     * gets the movie list from the API endpoint\n     */\n    async getGenres() {\n\n    \tconst genres = await axios.get(`https://api.themoviedb.org/3/genre/movie/list?api_key=${TMDB_API_KEY}&language=en-US`)\n\n        this.setState({\n            genres: genres.data\n        });\n\t}\n\n    /**\n     * gets the search resultsu from the API endpoint\n     */\n    async search() {\n\n    \tconst { searchQuery, pageNumber } = this.state;\n    \tlet searchTv;\n\n    \tif(searchQuery !== \"\") {\n\t    \tsearchTv = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=${TMDB_API_KEY}&language=en-US&query=${searchQuery}&page=${pageNumber}`);\n    \t} else {\n    \t\tthis.getTvShows();\n    \t}\n\n    \tthis.setState({\n            isLoading: false,\n            tvshows: (searchQuery !== \"\") && searchTv.data,\n            totalMovies: (searchQuery !== \"\") && searchTv.data.total_pages,\n            pageNumber: 1\n        });\n\n    }\n\n    /**\n     * handles search onChange event\n     * @param {string} event\t\tevent object\n     */\n    handleSearch(event) {\n        this.setState({ searchQuery: event.target.value }, () => { \n        \tthis.search();\n        });\n\n        this.resetGenres();\n        this.resetSort();\n    }\n\n    /**\n\t * change current page of data\n\t * @param {number} pageNumber\t page number to show\n\t */\n\tchangePage(pageNumber) {\n\t\tconst { searchQuery } = this.state;\n\n\t\tthis.setState({ \n\t\t\tpageNumber: pageNumber.selected + 1\n\t\t}, () => {\n\t\t\tif(searchQuery === \"\") {\n\t\t\t\tthis.getTvShows();\n\t\t\t} else {\n\t\t\t\tthis.search();\n\t\t\t}\n\t\t});\n\n\t\twindow.scrollTo(0, 0);\n\t}\n\n\t/**\n     * handles changing of sort type\n     * @param {object} event\t\tevent object\n     */\n    handleSortChange(event) {\n        this.setState({ sortBy: event.target.value }, () => {\n            this.getTvShows();\n        });\n\n        this.resetSearch();\n    }\n\n    /**\n     * handles changing of genre\n     * @param {object} event\t\tevent object\n     */\n    handleGenreChange(event) {\n        this.setState({ selectedGenre: event.target.value }, () => {\n            this.getTvShows();\n        });\n\n        this.resetSearch();\n    }\n\n    /**\n     * resets search bar\n     */\n    resetSearch() {\n    \tthis.setState({searchQuery: \"\"});\n    }\n\n    /**\n     * resets genres\n     */\n    resetGenres() {\n    \tthis.setState({selectedGenre: \"\"});\n    }\n\n    /**\n     * resets sort\n     */\n    resetSort() {\n    \tthis.setState({sortBy: \"popularity.desc\"});\n    }\n\n\trender() {\n\n\t\tconst { tvshows, searchQuery, totalMovies, sortBy, genres, selectedGenre } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"home\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h1>The TV Database</h1>\n\t\t\t\t\t\t<h4>Explore your favourite TV shows</h4>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<input placeholder=\"Search for a TV title...\" className=\"search\" type=\"text\" value={searchQuery} onChange={this.handleSearch} />\n\t\t\t\t</div>\n\n\t\t\t\t<form className=\"toolbox\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col\">\n\n\t\t\t\t\t\t\t\t<div className=\"toolbox__group\">\n\n\t\t\t\t\t\t\t\t\t<select className=\"sort\" value={sortBy} onChange={this.handleSortChange}>\n\t\t\t\t\t\t\t\t\t\t<option value=\"popularity.desc\">Popularity (Most to Least)</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"popularity.asc\">Popularity (Least to Most)</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"first_air_date.desc\">First Air Date (Newest to Oldest)</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"first_air_date.asc\">First Air Date (Oldest to Newest)</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"vote_average.desc\">Vote Average (Highest to Lowest)</option>\n\t\t\t\t\t\t\t\t\t\t<option value=\"vote_average.asc\">Vote Average (Lowest to Highest)</option>\n\t\t\t\t\t\t\t\t\t</select>\n\n\t\t\t\t\t\t\t\t\t{genres &&\n\t\t\t\t\t\t\t\t\t\t<select value={selectedGenre} onChange={this.handleGenreChange}>\n\t\t\t\t\t\t\t\t\t\t\t<option value=\"\">All Genres</option>\t\n\t\t\t\t\t\t\t\t\t\t\t{genres.genres.map(genre => {\n\t\t\t\t\t\t        \t\t\t\treturn (\n\t\t\t\t\t\t        \t\t\t\t\t<option value={genre.id} key={genre.id}>{genre.name}</option>\n\t\t\t\t\t\t        \t\t\t\t);\n\t\t\t\t\t\t        \t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\n\t\t\t\t<div className=\"container home__body\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col\">\n\n\t\t\t\t\t\t\t<div className=\"home__tagline\">\n\t\t\t\t\t\t\t\t<p className=\"home__tagline-title\">Search TV shows. Add to favourites. Watch trailers.</p>\n\t\t\t\t\t\t\t\t<p>Explore the next TV series to binge-watch!</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t<TvList tvshows={tvshows}/>\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"container\">\n\n\t\t\t\t\t{tvshows && \n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t\t{tvshows.length !== 0 &&\n\t\t\t\t\t\t\t        <ReactPaginate\n\t\t\t\t\t\t\t          previousLabel={'previous'}\n\t\t\t\t\t\t\t          nextLabel={'next'}\n\t\t\t\t\t\t\t          breakLabel={'...'}\n\t\t\t\t\t\t\t          breakClassName={'break-me'}\n\t\t\t\t\t\t\t          pageCount={totalMovies}\n\t\t\t\t\t\t\t          pageClassName={'pagination-item'}\n\t\t\t\t\t\t\t          marginPagesDisplayed={2}\n\t\t\t\t\t\t\t          pageRangeDisplayed={5}\n\t\t\t\t\t\t\t          onPageChange={this.changePage}\n\t\t\t\t\t\t\t          containerClassName={'pagination'}\n\t\t\t\t\t\t\t          subContainerClassName={'pages pagination'}\n\t\t\t\t\t\t\t          activeClassName={'page-active'}\n\t\t\t\t\t\t\t          previousLinkClassName={'page-prev'}\n\t\t\t\t\t\t\t          nextLinkClassName={'page-next'}\n\t\t\t\t\t\t\t        />\n\t\t\t\t\t\t\t  \t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t}\n}\n\nexport default Home;","import React, { Component, Fragment } from \"react\";\nimport { withRouter } from \"react-router\";\n\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport qs from \"qs\";\n\nimport { TMDB_API_KEY } from \"../../../config.js\";\n\nimport \"./TvDetail.scss\";\n\nclass TvDetail extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tvDetail: null,\n            tvId: null,\n\n            season: \"1\",\n            seasonDetail: null,\n\n            favourites: [],\n            favourited: false\n        };\n\n        this.handleSeasonChange = this.handleSeasonChange.bind(this);\n        this.toggleFavourite = this.toggleFavourite.bind(this);\n        this.checkIfFavourited = this.checkIfFavourited.bind(this);\n    }\n\n    componentDidMount() {\n        this.getTvId();\n        this.setUpLocalStorage();\n    }\n\n    /**\n     * sets-up local storage\n     */\n    setUpLocalStorage() {\n    \tif (localStorage.hasOwnProperty(\"favourites\")) {\n            let favouritesLocal = JSON.parse(localStorage.getItem('favourites'));\n            this.setState({ favourites: favouritesLocal }, () => {\n                this.setState({ favourited: this.checkIfFavourited() });\n            });\n        } else {\n            localStorage.setItem(\"favourites\", JSON.stringify([]));\n        }\n    }\n\n    /**\n     * checks if the current TV show is favourited or not\n     * @returns {boolean} hasTvId\t\twhether favourites has the current tvId\n     */\n    checkIfFavourited() {\n        const { favourites, tvId } = this.state;\n        let hasTvId = null;\n\n        if (favourites.length !== 0) {\n            hasTvId = favourites.find(id => {\n                return id === tvId;\n            });\n        }\n\n        return hasTvId;\n    }\n\n    /**\n     * gets the movie detail from the API endpoint\n     */\n    getTvId() {\n        const { history: { location } } = this.props;\n\n        const query = qs.parse(location.search, {\n            ignoreQueryPrefix: true\n        });\n\n        this.setState({ tvId: query.query }, () => {\n            this.getTvDetail();\n            this.getSeason();\n        })\n    }\n\n    /**\n     * gets the TV detail from the API endpoint\n     */\n    async getTvDetail() {\n        const { tvId } = this.state;\n\n        const showDetail = await axios.get(`https://api.themoviedb.org/3/tv/${tvId}?api_key=${TMDB_API_KEY}&language=en-US&append_to_response=videos,credits`);\n\n        this.setState({\n            isLoading: false,\n            tvDetail: showDetail.data\n        }, () => {\n            const { tvDetail } = this.state;\n            document.title = `The TV Database - ${tvDetail.name}`;\n        });\n    }\n\n    /**\n     * gets the TV seasons from the API endpoint\n     */\n    async getSeason() {\n        const { season, tvId } = this.state;\n\n        const showSeason = await axios.get(`https://api.themoviedb.org/3/tv/${tvId}/season/${season}?api_key=${TMDB_API_KEY}`);\n\n        this.setState({\n            seasonDetail: showSeason.data\n        });\n    }\n\n    /**\n     * handles changing of season\n     * @param {object} event\t\tevent object\n     */\n    handleSeasonChange(event) {\n        this.setState({ season: event.target.value }, () => {\n            this.getSeason();\n        });\n    }\n\n    /**\n     * toggles favourite\n     */\n    toggleFavourite() {\n        const { tvId, favourites } = this.state;\n\n        if (this.checkIfFavourited()) {\n            this.setState({\n                favourites: favourites.filter(id => {\n                    return id !== tvId\n                }),\n                favourited: false\n            }, () => {\n                localStorage.setItem(\"favourites\", JSON.stringify(this.state.favourites));\n            });\n        } else {\n            this.setState({ favourites: [...this.state.favourites, tvId], favourited: true }, () => {\n                localStorage.setItem(\"favourites\", JSON.stringify(this.state.favourites));\n            });\n\n        }\n    }\n\n    render() {\n        const { tvDetail, season, seasonDetail, favourited } = this.state;\n\n        if (tvDetail && seasonDetail) {\n\n            return (\n                <div className=\"movie-detail\">\n\t            \t<div className=\"movie-detail__header\" style={{backgroundImage: `url(http://image.tmdb.org/t/p/w1280${tvDetail.backdrop_path})`}}>\n\t            \t\t<div className=\"movie-detail__header-overlay\"></div>\n\t            \t\t<h1>{tvDetail.name}</h1>\n\t            \t\t<h3>\n\t            \t\t\t{tvDetail.number_of_seasons} Season(s), {tvDetail.number_of_episodes} Episodes\n\t            \t\t</h3>\n\t            \t\t<h2>\n\t            \t\t\t{tvDetail.genres.map(genre => {\n\t            \t\t\t\treturn (\n\t            \t\t\t\t\t<span key={genre.id}>{genre.name}</span>\n\t            \t\t\t\t);\n\t            \t\t\t})}\n\t            \t\t</h2>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"movie-detail__body\">\n\t\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t\t<div className=\"col-12 col-sm-4 col-lg-4\">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div className=\"movie-detail__sidebar\">\n\t\t\t\t\t\t\t\t\t\n                                        <div className=\"movie-detail__sidebar-group\">\t\t\n    \t\t\t\t\t\t\t\t\t\t<img src={`http://image.tmdb.org/t/p/w342${tvDetail.poster_path}`} alt={tvDetail.name} />\n                                            <p className=\"movie-detail__status\">{tvDetail.status}</p>    \n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t<button className={`movie-detail__button movie-detail__button--toggle-favourites ${favourited && \" movie-detail__button--toggle-favourites--favourited\"}`} onClick={this.toggleFavourite}>{favourited ? \"- Remove from Favourites\" : \"+ Add to Favourites\"}</button>\n\n\t\t\t\t\t\t\t\t\t\t<p><strong>Created by</strong> {tvDetail.created_by.map(creator => {\n\t\t\t\t\t\t\t\t\t\t\treturn (<span key={creator.id}>{creator.name} </span>);\n\t\t\t\t\t\t\t\t\t\t})}<br />\n\t\t\t\t\t\t\t\t\t\t<strong>Each episode lasts about</strong> {tvDetail.episode_run_time} mins.\n\t\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t\t<strong>Originally from</strong> {tvDetail.origin_country}<br />\n\t\t\t\t\t\t\t\t\t\t<strong>First aired on</strong> {moment(tvDetail.first_air_date).format(\"MMM Do YYYY\")}</p>\n\n\t\t\t\t\t\t\t\t\t\t<p>Average Rating<br />\n\t\t\t\t\t\t\t\t\t\t<span className=\"movie-detail__rating\">{tvDetail.vote_average} / 10</span></p>\n\n                                        {tvDetail.videos.results.length > 0 &&\n                                            <Fragment>    \n                                                <p>Trailers & Related Videos</p>\n\n                                                <div>\n                                                    {tvDetail.videos.results.map(video => {\n                                                        return (\n                                                            <div className=\"movie-detail__iframe-wrapper\" key={video.key}>\n                                                                <iframe key={video.key} src={`https://www.youtube.com/embed/${video.key}`}\n                                                                    frameBorder='0'\n                                                                    allow='autoplay; encrypted-media'\n                                                                    allowFullScreen\n                                                                    title='video'\n                                                                />\n                                                            </div>\n                                                        );\n                                                    })}\n                                                </div>\n                                            </Fragment>\n                                        }\n\n                                        {tvDetail.credits.cast.length > 0 &&\n                                            <Fragment>    \n                                                <p>Cast and Characters</p> \n\n                                                <ul className=\"movie-detail__cast\">\n                                                    {tvDetail.credits.cast.map(person => {\n                                                        return (\n                                                            <li key={person.id}><strong>{person.name}</strong> <span>as</span> {person.character}</li>\n                                                        );\n                                                    })}\n                                                </ul>\n                                            </Fragment>\n                                        }\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=\"col-12 col-sm-8 col-lg-8\">\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<div className=\"movie-detail__content\">\n\n\t\t\t\t\t\t\t\t\t\t<p className=\"movie-detail__synopsis\">{tvDetail.overview}</p>\n\n\t\t\t\t\t\t\t\t\t\t{(tvDetail.seasons.length > 1) && \n\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t<select className=\"movie-detail__season-selector\" value={season} onChange={this.handleSeasonChange}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{tvDetail.seasons.map(season => {\n\t\t\t\t\t\t\t            \t\t\t\treturn (\n\t\t\t\t\t\t\t            \t\t\t\t\t<option value={season.season_number} key={season.season_number}>{season.name}</option>\n\t\t\t\t\t\t\t            \t\t\t\t);\n\t\t\t\t\t\t\t            \t\t\t})}\n\t\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t<h3 className=\"movie-detail__ep-title\">Episodes</h3>\n\n\t\t\t\t\t\t\t\t\t\t<ul className=\"movie-detail__episodes\">\n\t\t\t\t\t\t\t\t\t\t\t{seasonDetail.episodes.map(episode => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li className=\"movie-detail__episode\" key={episode.id}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"movie-detail__episode-thumbnail\" style={{backgroundImage: `url(http://image.tmdb.org/t/p/w185${episode.still_path})`}}> <div className=\"movie-detail__episode-number\">{episode.episode_number}</div></div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<h4>{episode.name}</h4>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{episode.vote_average > 0 && \n                                                                <p className=\"movie-detail__episode-rating\">Average Rating: {episode.vote_average}</p>\n                                                            }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{episode.overview !== \"\" ? episode.overview : \"No description at the moment.\"}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t\t</ul>\n\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nexport default withRouter(TvDetail);","import React, { Component } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\n\nimport Home from \"./modules/home/Home\";\nimport MovieDetail from \"./modules/tv-list/tv-detail/TvDetail\";\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact component={Home} path=\"/\" />\n        <Route exact component={MovieDetail} path=\"/tv-detail\" />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { HashRouter } from 'react-router-dom';\n\nconst App = () => {\n\treturn (\n\t\t<HashRouter>\n\t\t\t<Routes />\n\t\t</HashRouter>\n\t)\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}